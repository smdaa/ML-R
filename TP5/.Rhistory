setwd("~/ML-R/TP5")
library("e1071")
data = read.table("DataTP.txt",header=TRUE)
svm.out = svm(FFo ~ . , data)
plot(tune.svm (FFo ~ . , data=data, cost=seq(1,4,0.5)))
?svm
?svm
?svm
?tune.svm
X11()
plot(tune.svm (FFo ~ . , data=data, cost=seq(1,4,0.5)))
?svm
set.seed(10)
K = 10
rows = sample(nrow(data))
datashuffle = data[rows,]
ntest = ceiling((1/K) * nrow(data))
endtest = 0
a.linear     = c()
a.polynomial = c()
a.radial     = c()
t.linear     = c()
t.polynomial = c()
t.radial     = c()
for (i in 1:K) {
starttest = endtest + 1
endtest   = i * ntest
if (endtest > nrow(data)) {
endtest = nrow(data)
}
datatest = datashuffle[starttest:endtest,]
datapp   = datashuffle[setdiff(1:nrow(data), starttest:endtest),]
svm.linear     = svm(FFo ~ . , datapp, kernel="linear")
svm.polynomial = svm(FFo ~ . , datapp, kernel="polynomial")
svm.radial     = svm(FFo ~ . , datapp, kernel="radial")
t.linear = c(t.linear, predict(svm.linear, datatest))
t.polynomial = c(t.polynomial, predict(svm.polynomial, datatest))
t.radial = c(t.radial, predict(svm.radial, datatest))
a.linear = c(a.linear, fitted(svm.linear))
a.polynomial = c(a.polynomial, fitted(svm.polynomial))
a.radial = c(a.radial, fitted(svm.radial))
}
eval=function(obs, prev) {
rmse  = sqrt(mean((prev - obs)**2))
biais = mean(prev - obs)
return(c(biais,rmse))
}
set.seed(10)
K = 10
rows = sample(nrow(data))
datashuffle = data[rows,]
ntest = ceiling((1/K) * nrow(data))
endtest = 0
a.linear     = c()
a.polynomial = c()
a.radial     = c()
t.linear     = c()
t.polynomial = c()
t.radial     = c()
for (i in 1:K) {
starttest = endtest + 1
endtest   = i * ntest
if (endtest > nrow(data)) {
endtest = nrow(data)
}
datatest = datashuffle[starttest:endtest,]
datapp   = datashuffle[setdiff(1:nrow(data), starttest:endtest),]
svm.linear     = svm(FFo ~ . , datapp, kernel="linear")
svm.polynomial = svm(FFo ~ . , datapp, kernel="polynomial")
svm.radial     = svm(FFo ~ . , datapp, kernel="radial")
t.linear = c(t.linear, eval(datatest ,predict(svm.linear, datatest))[2])
t.polynomial = c(t.polynomial, eval(datatest ,predict(svm.polynomial, datatest))[2])
t.radial = c(t.radial, eval(datatest, predict(svm.radial, datatest))[2])
a.linear = c(a.linear, eval(datapp, fitted(svm.linear))[2])
a.polynomial = c(a.polynomial, eval(datapp, fitted(svm.polynomial))[2])
a.radial = c(a.radial, eval(datapp, fitted(svm.radial))[2])
}
X11()
boxplot(a.polynomial, a.linear, a.radial, t.polynomial, t.linear, t.radial,
col   = c("blue", "blue", "blue", "red", "red", "red"),
names = c("a.polynomial", "a.linear", "a.radial", "t.polynomial", "t.linear", "t.radial"),
main  = "Svm - Score RMSE")
eval(datatest ,predict(svm.linear, datatest))[2]
eval(datatest ,predict(svm.linear, datatest))[2]
head(dataset)
head(datatest)
set.seed(10)
K = 10
rows = sample(nrow(data))
datashuffle = data[rows,]
ntest = ceiling((1/K) * nrow(data))
endtest = 0
a.linear     = c()
a.polynomial = c()
a.radial     = c()
t.linear     = c()
t.polynomial = c()
t.radial     = c()
i= 1
starttest = endtest + 1
endtest   = i * ntest
if (endtest > nrow(data)) {
endtest = nrow(data)
}
datatest = datashuffle[starttest:endtest,]
datapp   = datashuffle[setdiff(1:nrow(data), starttest:endtest),]
svm.linear     = svm(FFo ~ . , datapp, kernel="linear")
svm.polynomial = svm(FFo ~ . , datapp, kernel="polynomial")
svm.radial     = svm(FFo ~ . , datapp, kernel="radial")
t.linear = c(t.linear, eval(datatest ,predict(svm.linear, datatest))[2])
predict(svm.linear, datatest)
datatest
set.seed(10)
K = 10
rows = sample(nrow(data))
datashuffle = data[rows,]
ntest = ceiling((1/K) * nrow(data))
endtest = 0
a.linear     = c()
a.polynomial = c()
a.radial     = c()
t.linear     = c()
t.polynomial = c()
t.radial     = c()
for (i in 1:K) {
starttest = endtest + 1
endtest   = i * ntest
if (endtest > nrow(data)) {
endtest = nrow(data)
}
datatest = datashuffle[starttest:endtest,]
datapp   = datashuffle[setdiff(1:nrow(data), starttest:endtest),]
svm.linear     = svm(FFo ~ . , datapp, kernel="linear")
svm.polynomial = svm(FFo ~ . , datapp, kernel="polynomial")
svm.radial     = svm(FFo ~ . , datapp, kernel="radial")
t.linear = c(t.linear, eval(datatest$FFo ,predict(svm.linear, datatest))[2])
t.polynomial = c(t.polynomial, eval(datatest$FFo ,predict(svm.polynomial, datatest))[2])
t.radial = c(t.radial, eval(datatest$FFo, predict(svm.radial, datatest))[2])
a.linear = c(a.linear, eval(datapp$FFo, fitted(svm.linear))[2])
a.polynomial = c(a.polynomial, eval(datapp$FFo, fitted(svm.polynomial))[2])
a.radial = c(a.radial, eval(datapp$FFo, fitted(svm.radial))[2])
}
X11()
boxplot(a.polynomial, a.linear, a.radial, t.polynomial, t.linear, t.radial,
col   = c("blue", "blue", "blue", "red", "red", "red"),
names = c("a.polynomial", "a.linear", "a.radial", "t.polynomial", "t.linear", "t.radial"),
main  = "Svm - Score RMSE")
X11()
boxplot(a.polynomial, a.radial, a.linear, t.polynomial, t.linear, t.radial,
col   = c("blue", "blue", "blue", "red", "red", "red"),
names = c("a.polynomial", "a.radial", "a.linear", "t.polynomial", "t.linear", "t.radial"),
main  = "Svm - Score RMSE")
source("scores.R")
scores(datatest$FFo, predict(svm.linear, datatest))
X11()
boxplot(a.polynomial, a.radial, a.linear, t.polynomial, t.linear, t.radial,
col   = c("blue", "blue", "blue", "red", "red", "red"),
names = c("a.polynomial", "a.radial", "a.linear", "t.polynomial", "t.linear", "t.radial"),
main  = "Svm - Score RMSE")
X11()
boxplot(a.polynomial, a.radial, a.linear, t.polynomial, t.linear, t.radial,
col   = c("blue", "blue", "blue", "red", "red", "red"),
names = c("a.polynomial", "a.radial", "a.linear", "t.polynomial", "t.linear", "t.radial"),
main  = "Svm - Score RMSE")
set.seed(0)
K = 10
rows = sample(nrow(data))
datashuffle = data[rows,]
ntest = ceiling((1/K) * nrow(data))
ntest
endtest = 0
a.linear     = c()
a.polynomial = c()
a.radial     = c()
t.linear     = c()
t.polynomial = c()
t.radial     = c()
i= 1
starttest = endtest + 1
endtest   = i * ntest
if (endtest > nrow(data)) {
endtest = nrow(data)
}
datatest = datashuffle[starttest:endtest,]
datapp   = datashuffle[setdiff(1:nrow(data), starttest:endtest),]
svm.linear     = svm(FFo ~ . , datapp, kernel="linear")
svm.polynomial = svm(FFo ~ . , datapp, kernel="polynomial")
svm.radial     = svm(FFo ~ . , datapp, kernel="radial")
t.linear = c(t.linear, eval(datatest$FFo ,predict(svm.linear, datatest))[2])
t.polynomial = c(t.polynomial, eval(datatest$FFo ,predict(svm.polynomial, datatest))[2])
t.radial = c(t.radial, eval(datatest$FFo, predict(svm.radial, datatest))[2])
a.linear = c(a.linear, eval(datapp$FFo, fitted(svm.linear))[2])
a.polynomial = c(a.polynomial, eval(datapp$FFo, fitted(svm.polynomial))[2])
a.radial = c(a.radial, eval(datapp$FFo, fitted(svm.radial))[2])
for (i in 1:K) {
starttest = endtest + 1
endtest   = i * ntest
if (endtest > nrow(data)) {
endtest = nrow(data)
}
datatest = datashuffle[starttest:endtest,]
datapp   = datashuffle[setdiff(1:nrow(data), starttest:endtest),]
svm.linear     = svm(FFo ~ . , datapp, kernel="linear")
svm.polynomial = svm(FFo ~ . , datapp, kernel="polynomial")
svm.radial     = svm(FFo ~ . , datapp, kernel="radial")
t.linear = c(t.linear, eval(datatest$FFo ,predict(svm.linear, datatest))[2])
t.polynomial = c(t.polynomial, eval(datatest$FFo ,predict(svm.polynomial, datatest))[2])
t.radial = c(t.radial, eval(datatest$FFo, predict(svm.radial, datatest))[2])
a.linear = c(a.linear, eval(datapp$FFo, fitted(svm.linear))[2])
a.polynomial = c(a.polynomial, eval(datapp$FFo, fitted(svm.polynomial))[2])
a.radial = c(a.radial, eval(datapp$FFo, fitted(svm.radial))[2])
}
X11()
boxplot(a.polynomial, a.radial, a.linear, t.polynomial, t.linear, t.radial,
col   = c("blue", "blue", "blue", "red", "red", "red"),
names = c("a.polynomial", "a.radial", "a.linear", "t.polynomial", "t.linear", "t.radial"),
main  = "Svm - Score RMSE")
X11()
boxplot(a.polynomial, a.radial, a.linear, t.polynomial, t.linear, t.radial,
col   = c("blue", "blue", "blue", "red", "red", "red"),
names = c("a.polynomial", "a.radial", "a.linear", "t.polynomial", "t.linear", "t.radial"),
main  = "Svm - Score RMSE")
